#!/usr/bin/python3
import sys
import math

"""
Function to find the greatest common divisor.
Uses the Euclidean algorithm.
"""
def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

"""
Pollard's Rho algorithm to find factors.
"""
def pollard_rho(n):
    if n % 2 == 0:
        return 2

    x = 2
    y = 2
    d = 1

    f = lambda x: (x ** 2 + 1) % n

    while d == 1:
        x = f(x)
        y = f(f(y))
        d = gcd(abs(x - y), n)

    return d

"""
Function to factorize the number into its prime factors.
"""
def factorize_prime(n):
    factors = []

    while n > 1:
        if n == 2 or n == 3:
            factors.append(n)
            break

        factor = pollard_rho(n)
        while n % factor == 0:
            factors.append(factor)
            n //= factor

    return factors

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python rsa_factors.py <file>")
        sys.exit(1)

    file_path = sys.argv[1]

    with open(file_path, "r") as file:
        num = int(file.read())

    # Factorize the number into its prime factors
    prime_factors = factorize_prime(num)
    # Check if the prime factors were found and print the result
    if len(prime_factors) == 2:
        p, q = prime_factors
        print(f"{num}={p}*{q}")
    else:
        print("Prime factors not found within the time limit.")

